import sys
import numpy as np
import matplotlib.pyplot as plt
import tkinter as tk
from tkinter import Label, Entry, Button, Canvas
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from time import sleep
import nidaqmx
from nidaqmx.constants import AcquisitionType, READ_ALL_AVAILABLE
from PYME.Acquire.Hardware.Mercury import mercuryStepper

class MotorControlGUI:
    def __init__(self, root):
        self.root = root
        self.root.title('Mercury Stage Control')

        # Mercury Stage Initialization
        self.my_stage = mercuryStepper.mercuryStepper(comPort=4, axes=['A', 'C'], steppers=['M-505.2DG', 'M-505.2DG'])

        Label(root, text='Step Size:').grid(row=0, column=0)
        self.step_input = Entry(root)
        self.step_input.grid(row=0, column=1)
        self.step_input.insert(0, '0.1')

        Button(root, text='Move X Positive', command=lambda: self.move_motor(0, float(self.step_input.get()))).grid(row=1, column=0)
        Button(root, text='Move X Negative', command=lambda: self.move_motor(0, -float(self.step_input.get()))).grid(row=1, column=1)

        Button(root, text='Move Y Positive', command=lambda: self.move_motor(1, float(self.step_input.get()))).grid(row=2, column=0)
        Button(root, text='Move Y Negative', command=lambda: self.move_motor(1, -float(self.step_input.get()))).grid(row=2, column=1)

        Button(root, text='Optimize Position', command=self.optimize_position).grid(row=3, column=0, columnspan=2)

        self.result_label = Label(root, text='')
        self.result_label.grid(row=4, column=0, columnspan=2)

        self.wavelengths = np.linspace(750, 800, 50)
        self.signal_values = [self.measure_signal() for _ in self.wavelengths]

        self.fig, self.ax = plt.subplots()
        self.ax.set_xlabel("Wavelength (nm)")
        self.ax.set_ylabel("Signal Strength")
        self.line, = self.ax.plot(self.wavelengths, self.signal_values, 'b-')

        self.canvas = FigureCanvasTkAgg(self.fig, master=root)
        self.canvas.get_tk_widget().grid(row=5, column=0, columnspan=2)
        self.update_plot()

    def move_motor(self, chan, step):
        try:
            current_pos = self.my_stage.GetPos(iChan=chan)
            self.my_stage.MoveTo(iChan=chan, fPos=current_pos + step)
            sleep(0.1)
            new_pos = self.my_stage.GetPos(iChan=chan)
            self.result_label.config(text=f"Channel {chan} moved to: {new_pos:.3f}")
        except Exception as e:
            self.result_label.config(text=f"Error: {str(e)}")

    def optimize_position(self, learning_rate=0.1, max_iterations=10):
        try:
            current_x = self.my_stage.GetPos(iChan=0)
            current_y = self.my_stage.GetPos(iChan=1)
            best_x, best_y = current_x, current_y
            best_signal = self.measure_signal()

            for i in range(max_iterations):
                grad_x = (self.measure_signal_at(current_x + learning_rate, current_y) - best_signal) / learning_rate
                grad_y = (self.measure_signal_at(current_x, current_y + learning_rate) - best_signal) / learning_rate

                current_x += learning_rate * grad_x
                current_y += learning_rate * grad_y

                self.my_stage.MoveTo(iChan=0, fPos=current_x)
                self.my_stage.MoveTo(iChan=1, fPos=current_y)
                sleep(0.1)

                new_signal = self.measure_signal()
                self.signal_values = [self.measure_signal() for _ in self.wavelengths]
                self.update_plot()
                if new_signal > best_signal:
                    best_signal = new_signal
                    best_x, best_y = current_x, current_y
                else:
                    learning_rate *= 0.5

            self.my_stage.MoveTo(iChan=0, fPos=best_x)
            self.my_stage.MoveTo(iChan=1, fPos=best_y)
            self.result_label.config(text=f"Optimal Position: X={best_x:.3f}, Y={best_y:.3f}, Signal={best_signal:.3f}")

        except Exception as e:
            self.result_label.config(text=f"Error: {str(e)}")

    def measure_signal(self):
        try:
            with nidaqmx.Task() as task:
                task.ai_channels.add_ai_voltage_chan("Dev1/ai1")
                task.timing.cfg_samp_clk_timing(1000.0, sample_mode=AcquisitionType.FINITE, samps_per_chan=500)
                data = task.read(READ_ALL_AVAILABLE)
                return np.mean(data)
        except Exception as e:
            print("DAQ error:", e)
            return 0

    def measure_signal_at(self, x, y):
        return self.measure_signal() - ((x**2 + y**2) / 100)

    def update_plot(self):
        self.line.set_ydata(self.signal_values)
        self.ax.relim()
        self.ax.autoscale_view()
        self.canvas.draw()

if __name__ == '__main__':
    root = tk.Tk()
    app = MotorControlGUI(root)
    root.mainloop()
